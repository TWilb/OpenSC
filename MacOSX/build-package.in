#!/bin/bash
# Build the macOS installer for the tokend and command line tools.
#
# This is only tested and supported on macOS 10.10 or later, using Xcode 6.0.1.
# Building should also work on older macOS versions with slight changes; YMMV.

# You need to install the following packages from homebrew or macports or fink:
# autoconf automake libtool pkg-config help2man gengetopt

export MACOSX_DEPLOYMENT_TARGET="10.10"

set -ex
test -x ./configure || ./bootstrap
BUILDPATH=${PWD}

# Locate the latest OSX SDK
SDK_PATH=$(xcrun --sdk macosx --show-sdk-path)

# Set SDK path
export CFLAGS="$CFLAGS -isysroot $SDK_PATH -arch x86_64"

# xcodebuild doesn't read the environment variables
# transform them into parameters
P1="${CODE_SIGN_IDENTITY:+CODE_SIGN_IDENTITY=${CODE_SIGN_IDENTITY}}"
P2="${OTHER_CODE_SIGN_FLAGS:+OTHER_CODE_SIGN_FLAGS=${OTHER_CODE_SIGN_FLAGS}}"
P3="${CODE_SIGN_INJECT_BASE_ENTITLEMENTS:+CODE_SIGN_INJECT_BASE_ENTITLEMENTS=${CODE_SIGN_INJECT_BASE_ENTITLEMENTS}}"
P4="${CODE_SIGN_STYLE:+CODE_SIGN_STYLE=${CODE_SIGN_STYLE}}"
P5="${DEVELOPMENT_TEAM:+DEVELOPMENT_TEAM=${DEVELOPMENT_TEAM}}"



export SED=/usr/bin/sed
PREFIX=/Library/OpenSC
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/lib/pkgconfig

if ! pkg-config libcrypto --atleast-version=1.0.1; then
	# OpenSSL is not installed
	if ! test -e $BUILDPATH/openssl_bin/$PREFIX/lib/pkgconfig; then
		# Build OpenSSL manually, because Apple's binaries are deprecated
		if ! test -e openssl; then
			git clone --depth=1 https://github.com/openssl/openssl.git -b OpenSSL_1_1_1-stable
		fi
		cd openssl
		KERNEL_BITS=64 ./config no-shared --prefix=$PREFIX
		make clean
		make -j 4
		make DESTDIR=$BUILDPATH/openssl_bin install_sw
		cd ..
	fi
	export OPENSSL_CFLAGS="`env PKG_CONFIG_PATH=$BUILDPATH/openssl_bin/$PREFIX/lib/pkgconfig PKG_CONFIG_SYSROOT_DIR=$BUILDPATH/openssl_bin pkg-config --static --cflags libcrypto`"
	export OPENSSL_LIBS="`  env PKG_CONFIG_PATH=$BUILDPATH/openssl_bin/$PREFIX/lib/pkgconfig PKG_CONFIG_SYSROOT_DIR=$BUILDPATH/openssl_bin pkg-config --static --libs   libcrypto`"
fi

if ! test -e $BUILDPATH/openpace_bin/$PREFIX/lib/pkgconfig; then
	if ! test -e openpace; then
		git clone --depth=1 https://github.com/frankmorgner/openpace.git -b 1.1.0
	fi
	cd openpace
	autoreconf -vis
	./configure --disable-shared --prefix=$PREFIX CRYPTO_CFLAGS="$OPENSSL_CFLAGS" CRYPTO_LIBS="$OPENSSL_LIBS" HELP2MAN=/usr/bin/true
	touch src/cvc-create.1 src/cvc-print.1
	make DESTDIR=$BUILDPATH/openpace_bin install
	cd ..
fi
export OPENPACE_CFLAGS="`env PKG_CONFIG_PATH=$BUILDPATH/openssl_bin/$PREFIX/lib/pkgconfig:$BUILDPATH/openpace_bin/$PREFIX/lib/pkgconfig PKG_CONFIG_SYSROOT_DIR=$BUILDPATH/openpace_bin pkg-config --static --cflags libeac` $OPENSSL_CFLAGS"
export OPENPACE_LIBS="`  env PKG_CONFIG_PATH=$BUILDPATH/openssl_bin/$PREFIX/lib/pkgconfig:$BUILDPATH/openpace_bin/$PREFIX/lib/pkgconfig PKG_CONFIG_SYSROOT_DIR=$BUILDPATH/openpace_bin pkg-config --static --libs   libeac` $OPENSSL_LIBS"

if ! test -e ${BUILDPATH}/target/$PREFIX/lib/pkgconfig; then
	./configure --prefix=$PREFIX \
		--sysconfdir=$PREFIX/etc \
		--enable-cvcdir=$PREFIX/etc/cvc \
		--enable-x509dir=$PREFIX/etc/x509 \
		--enable-openssl-secure-malloc=65536 \
		--disable-dependency-tracking \
		--enable-shared \
		--enable-static \
		--enable-strict \
		--disable-assert \
		--enable-sm # TODO: remove this (must be sensible default in master)

	# always make clean
	make clean

	# compile
	make -j 4

	# copy files
	rm -rf ${BUILDPATH}/target
	make install DESTDIR=${BUILDPATH}/target

	# remove garbage
	rm -f ${BUILDPATH}/target/$PREFIX/lib/*.la
	rm -f ${BUILDPATH}/target/$PREFIX/lib/*.a

	# generate .bundle (required by Adobe Acrobat)
	./MacOSX/libtool-bundle ${BUILDPATH}/target/$PREFIX/lib/opensc-pkcs11.so ${BUILDPATH}/target/$PREFIX/lib
fi


if ! test -e NotificationProxy; then
	git clone http://github.com/frankmorgner/NotificationProxy.git
fi
if test -n "${CODE_SIGN_IDENTITY}"; then
	xcodebuild -target NotificationProxy -configuration Release -project NotificationProxy/NotificationProxy.xcodeproj install DSTROOT=$BUILDPATH/target/Library/OpenSC/ "$P1" "$P2" "$P3" "$P4"
else
	xcodebuild -target NotificationProxy -configuration Release -project NotificationProxy/NotificationProxy.xcodeproj install DSTROOT=$BUILDPATH/target/Library/OpenSC/
fi
mkdir -p "$BUILDPATH/target/Applications"
osacompile -o "$BUILDPATH/target/Applications/OpenSC Notify.app" "MacOSX/OpenSC_Notify.applescript"


# Build OpenSC.tokend when XCode version < 10
if (( $(xcodebuild -version | sed -En 's/Xcode[[:space:]]+([0-9]+)(\.[0-9]*)*/\1/p') < 10 )); then
	# Check out OpenSC.tokend, if not already fetched.
	if ! test -e OpenSC.tokend; then
		git clone http://github.com/OpenSC/OpenSC.tokend.git
	fi

	# Create the symlink to OpenSC sources
	test -L OpenSC.tokend/build/opensc-src || ln -sf ${BUILDPATH}/src OpenSC.tokend/build/opensc-src

	# Build and copy OpenSC.tokend
	if test -n "${CODE_SIGN_IDENTITY}"; then
		xcodebuild -target OpenSC -configuration Deployment -project OpenSC.tokend/Tokend.xcodeproj install DSTROOT=${BUILDPATH}/target_tokend "$P1" $P2 "$P3" "$P4" "$P5"
	else
		xcodebuild -target OpenSC -configuration Deployment -project OpenSC.tokend/Tokend.xcodeproj install DSTROOT=${BUILDPATH}/target_tokend
	fi
else
	# https://github.com/OpenSC/OpenSC.tokend/issues/33
	mkdir -p ${BUILDPATH}/target_tokend
fi

#if ! test -e $BUILDPATH/target/Library/Security/tokend/OpenSC.tokend/Contents/Resources/Applications/terminal-notifier.app; then
	#if ! test -e terminal-notifier-1.7.1.zip; then
		#curl -L https://github.com/julienXX/terminal-notifier/releases/download/1.7.1/terminal-notifier-1.7.1.zip > terminal-notifier-1.7.1.zip
	#fi
	#if ! test -e terminal-notifier-1.7.1; then
		#unzip terminal-notifier-1.7.1.zip
	#fi
	#mkdir -p $BUILDPATH/target/Library/Security/tokend/OpenSC.tokend/Contents/Resources/Applications
	#cp -r terminal-notifier-1.7.1/terminal-notifier.app $BUILDPATH/target/Library/Security/tokend/OpenSC.tokend/Contents/Resources/Applications
#fi

imagedir=$(mktemp -d)

# Prepare target root
mkdir -p ${BUILDPATH}/target/usr/local/bin
cp MacOSX/opensc-uninstall ${BUILDPATH}/target/usr/local/bin

# Prepare startup root
mkdir -p ${BUILDPATH}/target_startup/Library/LaunchAgents
cp src/tools/pkcs11-register.plist ${BUILDPATH}/target_startup/Library/LaunchAgents
cp src/tools/opensc-notify.plist ${BUILDPATH}/target_startup/Library/LaunchAgents

# Build OpenSCToken if possible
if test -e OpenSCToken -a -n "${CODE_SIGN_IDENTITY}"; then
	cd OpenSCToken
	# make sure OpenSCToken builds with the same dependencies as before
	if ! test -e OpenSC; then
		git clone --depth=1 file://$PWD/../../OpenSC
	else
		cd OpenSC && git pull && cd ..
	fi
	mkdir -p build
	if ! test -e build/openssl; then
		# build/openssl/lib/libcrypto.a is hardcoded in OpenSCToken
		ln -sf $BUILDPATH/openssl_bin/$PREFIX build/openssl
		# in OpenSCToken's variant of OpenSC we still use OpenSSL flags from above
	fi
	if ! test -e build/openpace; then
		# build/openpace/lib/libeac.a is hardcoded in OpenSCToken
		ln -sf $BUILDPATH/openpace_bin/$PREFIX build/openpace
		# in OpenSCToken's variant of OpenSC we still use OpenPACE flags from above
	fi
	BP=${BUILDPATH}
	. ./bootstrap
	BUILDPATH=${BP}
	xcodebuild -target OpenSCTokenApp -configuration Debug -project OpenSCTokenApp.xcodeproj install DSTROOT=${BUILDPATH}/target_token "$P1" "$P2" "$P3" "$P4" "$P5"
	cd ..
else
	# if no OpenSCToken is checked out, then we create a dummy package
	mkdir -p ${BUILDPATH}/target_token
fi


FILESBIN=${BUILDPATH}/target/Library/OpenSC/bin/*
for f in $FILESBIN
do
  echo "Signing $f file..."
  codesign --force --verify  --options runtime --verbose --sign "${CODE_SIGN_IDENTITY}" $f
done


FILESLIBSO=${BUILDPATH}/target/Library/OpenSC/lib/*.so
for f in $FILESLIBSO
do
  echo "Signing $f file..."
  codesign --force --verify --options runtime  --verbose --sign "${CODE_SIGN_IDENTITY}" $f
done

FILESLIBBUNDLE=${BUILDPATH}/target/Library/OpenSC/lib/*.bundle
for f in $FILESLIBBUNDLE
do
  echo "Signing $f file..."
  codesign --force --verify --options runtime  --verbose --sign "${CODE_SIGN_IDENTITY}" $f
done

FILESLIBDY=${BUILDPATH}/target/Library/OpenSC/lib/*.dylib
for f in $FILESLIBDY
do
  echo "Signing $f file..."
  codesign --force --verify  --options runtime --verbose --sign "${CODE_SIGN_IDENTITY}" $f
done

codesign --force --verify --options runtime  --verbose --sign "${CODE_SIGN_IDENTITY}" "${BUILDPATH}/target/Applications/OpenSC Notify.app"

# Build package
pkgbuild --root ${BUILDPATH}/target --scripts MacOSX/scripts --identifier org.opensc-project.mac --version @PACKAGE_VERSION@ --install-location / OpenSC_unsigned.pkg
productsign --timestamp --sign "${CODE_SIGN_IDENTITY_INSTALLER}" ${BUILDPATH}/OpenSC_unsigned.pkg ${BUILDPATH}/OpenSC.pkg
rm OpenSC_unsigned.pkg

pkgbuild --root ${BUILDPATH}/target_tokend --identifier org.opensc-project.tokend --version @PACKAGE_VERSION@ --install-location / OpenSC-tokend_unsigned.pkg
productsign --timestamp --sign "${CODE_SIGN_IDENTITY_INSTALLER}" ${BUILDPATH}/OpenSC-tokend_unsigned.pkg ${BUILDPATH}/OpenSC-tokend.pkg
rm OpenSC-tokend_unsigned.pkg

pkgbuild --root ${BUILDPATH}/target_token --identifier org.opensc-project.mac.opensctoken --version @PACKAGE_VERSION@ --install-location / OpenSCToken_unsigned.pkg
productsign --timestamp --sign "${CODE_SIGN_IDENTITY_INSTALLER}" ${BUILDPATH}/OpenSCToken_unsigned.pkg ${BUILDPATH}/OpenSCToken.pkg
rm OpenSCToken_unsigned.pkg

pkgbuild --root ${BUILDPATH}/target_startup --identifier org.opensc-project.startup --version @PACKAGE_VERSION@ --install-location / OpenSC-startup_unsigned.pkg
productsign --timestamp --sign "${CODE_SIGN_IDENTITY_INSTALLER}" ${BUILDPATH}/OpenSC-startup_unsigned.pkg ${BUILDPATH}/OpenSC-startup.pkg
rm OpenSC-startup_unsigned.pkg

# Build product
productbuild --distribution MacOSX/Distribution.xml --package-path . --resources MacOSX/resources "${imagedir}/OpenSC @PACKAGE_VERSION@_unsigned.pkg"
productsign --timestamp --sign "${CODE_SIGN_IDENTITY_INSTALLER}" "${imagedir}/OpenSC @PACKAGE_VERSION@_unsigned.pkg" "${imagedir}/OpenSC @PACKAGE_VERSION@.pkg"
rm "${imagedir}/OpenSC @PACKAGE_VERSION@_unsigned.pkg"

# Build "Uninstaller"
osacompile -o "${imagedir}/OpenSC Uninstaller.app" "MacOSX/OpenSC_Uninstaller.applescript"
codesign --force --verify --options runtime  --verbose --sign "${CODE_SIGN_IDENTITY}" "${imagedir}/OpenSC Uninstaller.app"


# Create .dmg
rm -f OpenSC-@PACKAGE_VERSION@.dmg
i=0
while ! hdiutil create -srcfolder "${imagedir}" -volname "@PACKAGE_NAME@" -fs JHFS+ OpenSC-@PACKAGE_VERSION@.dmg
do
	i=$[$i+1]
	if [ $i -gt 2 ]
	then
		exit 1
	fi
done
rm -rf ${imagedir}

codesign -s "${CODE_SIGN_IDENTITY}" --timestamp OpenSC-@PACKAGE_VERSION@.dmg


PLIST_BUDDY='/usr/libexec/PlistBuddy'
echo "Uploading for notarization..."


xcrun altool --notarize-app --primary-bundle-id org.opensc-project.mac -u "${NOTARIZATION_ACCOUNT}" -p "${NOTARIZATION_ACCOUNT_PASSWORD}" --output-format xml --file OpenSC-@PACKAGE_VERSION@.dmg > notarize_result.plist

notarize_exit=$?
if [ "${notarize_exit}" != "0" ]
then
	echo "Notarization failed: ${notarize_exit}"
	cat "notarize_result.plist"
	exit 1
fi

request_uuid="$("${PLIST_BUDDY}" -c "Print notarization-upload:RequestUUID"  "notarize_result.plist")"
echo "Notarization UUID: ${request_uuid} result: $("${PLIST_BUDDY}" -c "Print success-message"  "notarize_result.plist")"


# -------- Check for notarization result every 30 sek

for (( ; ; ))
do
	xcrun altool --notarization-info "${request_uuid}" 	-u "${NOTARIZATION_ACCOUNT}" -p "${NOTARIZATION_ACCOUNT_PASSWORD}" --output-format xml > "notarize_status.plist"

	notarize_exit=$?
	if [ "${notarize_exit}" != "0" ]
	then
		echo "Notarization failed: ${notarize_exit}"
		cat "notarize_status.plist"
		exit 1
	fi
	notarize_status="$("${PLIST_BUDDY}" -c "Print notarization-info:Status"  "notarize_status.plist")"
	if [ "${notarize_status}" == "in progress" ]
	then
        echo "Waiting for notarization to complete"
        sleep 30
    else
    	echo "Notarization status: ${notarize_status}"
    	break
	fi
done


notarization_log_url="$("${PLIST_BUDDY}" -c "Print notarization-info:LogFileURL"  "notarize_status.plist")"
echo "Notarization log URL: ${notarization_log_url}"

if [ "${notarize_status}" != "success" ]
then
	echo "Notarization failed."
	if [ ! -z "${notarization_log_url}" ]
	then
		curl "${notarization_log_url}"
	fi
	exit 1
fi


# -------- Staple notarization result on to disk image

echo "Stapling notarization result..."
for (( ; ; ))
do
    xcrun stapler staple -q OpenSC-@PACKAGE_VERSION@.dmg
    stapler_status=$?
    if [ "${stapler_status}" = "65" ]
    then
        echo "Waiting for stapling to find record"
        sleep 30
    else
        echo "Stapler status: ${stapler_status}"
        break
    fi
done


# -------- Validate the resulting disk image

spctl --assess --type open --context context:primary-signature -v OpenSC-@PACKAGE_VERSION@.dmg
disk_image_validation_result=$?

if [ "${disk_image_validation_result}" != 0 ]
then
	echo "Failed to validate disk image: ${disk_image_validation_result}"
	curl "${notarization_log_url}"
	exit 1
else
	echo "Validated disk image: ${disk_image_validation_result}"
fi

